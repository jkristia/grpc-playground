"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ValueType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ValueTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ValueType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    UNKNOWN: _ValueType.ValueType  # 0
    TYPE_A: _ValueType.ValueType  # 1
    TYPE_B: _ValueType.ValueType  # 2

class ValueType(_ValueType, metaclass=_ValueTypeEnumTypeWrapper): ...

UNKNOWN: ValueType.ValueType  # 0
TYPE_A: ValueType.ValueType  # 1
TYPE_B: ValueType.ValueType  # 2
global___ValueType = ValueType

@typing.final
class FooA(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    id: builtins.str
    name: builtins.str
    value: builtins.int
    type: global___ValueType.ValueType
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        name: builtins.str | None = ...,
        value: builtins.int | None = ...,
        type: global___ValueType.ValueType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_name", b"_name", "_type", b"_type", "_value", b"_value", "name", b"name", "type", b"type", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_name", b"_name", "_type", b"_type", "_value", b"_value", "id", b"id", "name", b"name", "type", b"type", "value", b"value"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_name", b"_name"]) -> typing.Literal["name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_type", b"_type"]) -> typing.Literal["type"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_value", b"_value"]) -> typing.Literal["value"] | None: ...

global___FooA = FooA

@typing.final
class FooB(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    id: builtins.str
    def __init__(
        self,
        *,
        id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["id", b"id"]) -> None: ...

global___FooB = FooB

@typing.final
class FooC(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _ValueTypeExtra:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _ValueTypeExtraEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[FooC._ValueTypeExtra.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        UNKNOWN: FooC._ValueTypeExtra.ValueType  # 0
        TYPE_C: FooC._ValueTypeExtra.ValueType  # 1
        TYPE_D: FooC._ValueTypeExtra.ValueType  # 2

    class ValueTypeExtra(_ValueTypeExtra, metaclass=_ValueTypeExtraEnumTypeWrapper): ...
    UNKNOWN: FooC.ValueTypeExtra.ValueType  # 0
    TYPE_C: FooC.ValueTypeExtra.ValueType  # 1
    TYPE_D: FooC.ValueTypeExtra.ValueType  # 2

    ID_B_FIELD_NUMBER: builtins.int
    NAME_B_FIELD_NUMBER: builtins.int
    VALUE_B_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    EXTRA_FIELD_NUMBER: builtins.int
    OTHERS_FIELD_NUMBER: builtins.int
    FOOA_FIELD_NUMBER: builtins.int
    FOOB_FIELD_NUMBER: builtins.int
    FOOC_FIELD_NUMBER: builtins.int
    FOOD_FIELD_NUMBER: builtins.int
    LAST_FIELD_NUMBER: builtins.int
    id_b: builtins.str
    name_b: builtins.str
    value_b: builtins.int
    type: global___ValueType.ValueType
    extra: global___FooC.ValueTypeExtra.ValueType
    fooC: builtins.str
    fooD: builtins.int
    last: builtins.int
    @property
    def others(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___FooA]: ...
    @property
    def fooA(self) -> global___FooA: ...
    @property
    def fooB(self) -> global___FooB: ...
    def __init__(
        self,
        *,
        id_b: builtins.str = ...,
        name_b: builtins.str | None = ...,
        value_b: builtins.int | None = ...,
        type: global___ValueType.ValueType | None = ...,
        extra: global___FooC.ValueTypeExtra.ValueType = ...,
        others: collections.abc.Iterable[global___FooA] | None = ...,
        fooA: global___FooA | None = ...,
        fooB: global___FooB | None = ...,
        fooC: builtins.str = ...,
        fooD: builtins.int = ...,
        last: builtins.int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["AorBChoice", b"AorBChoice", "ThisOrThatChoice", b"ThisOrThatChoice", "_name_b", b"_name_b", "_type", b"_type", "_value_b", b"_value_b", "fooA", b"fooA", "fooB", b"fooB", "fooC", b"fooC", "fooD", b"fooD", "name_b", b"name_b", "type", b"type", "value_b", b"value_b"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["AorBChoice", b"AorBChoice", "ThisOrThatChoice", b"ThisOrThatChoice", "_name_b", b"_name_b", "_type", b"_type", "_value_b", b"_value_b", "extra", b"extra", "fooA", b"fooA", "fooB", b"fooB", "fooC", b"fooC", "fooD", b"fooD", "id_b", b"id_b", "last", b"last", "name_b", b"name_b", "others", b"others", "type", b"type", "value_b", b"value_b"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["AorBChoice", b"AorBChoice"]) -> typing.Literal["fooC", "fooD"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["ThisOrThatChoice", b"ThisOrThatChoice"]) -> typing.Literal["fooA", "fooB"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_name_b", b"_name_b"]) -> typing.Literal["name_b"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_type", b"_type"]) -> typing.Literal["type"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_value_b", b"_value_b"]) -> typing.Literal["value_b"] | None: ...

global___FooC = FooC

@typing.final
class FooFromCoPilot(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Bar(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        FOO_FIELD_NUMBER: builtins.int
        foo: builtins.int
        def __init__(
            self,
            *,
            foo: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["foo", b"foo"]) -> None: ...

    @typing.final
    class Baz(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        FOO_FIELD_NUMBER: builtins.int
        foo: builtins.str
        def __init__(
            self,
            *,
            foo: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["foo", b"foo"]) -> None: ...

    BAR_FIELD_NUMBER: builtins.int
    BAZ_FIELD_NUMBER: builtins.int
    @property
    def bar(self) -> global___FooFromCoPilot.Bar: ...
    @property
    def baz(self) -> global___FooFromCoPilot.Baz: ...
    def __init__(
        self,
        *,
        bar: global___FooFromCoPilot.Bar | None = ...,
        baz: global___FooFromCoPilot.Baz | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["bar", b"bar", "baz", b"baz", "choice", b"choice"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["bar", b"bar", "baz", b"baz", "choice", b"choice"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["choice", b"choice"]) -> typing.Literal["bar", "baz"] | None: ...

global___FooFromCoPilot = FooFromCoPilot
