"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ValueType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ValueTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ValueType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    UNKNOWN: _ValueType.ValueType  # 0
    TYPE_A: _ValueType.ValueType  # 1
    TYPE_B: _ValueType.ValueType  # 2

class ValueType(_ValueType, metaclass=_ValueTypeEnumTypeWrapper): ...

UNKNOWN: ValueType.ValueType  # 0
TYPE_A: ValueType.ValueType  # 1
TYPE_B: ValueType.ValueType  # 2
global___ValueType = ValueType

@typing.final
class FooA(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    id: builtins.str
    name: builtins.str
    value: builtins.int
    type: global___ValueType.ValueType
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        name: builtins.str | None = ...,
        value: builtins.int | None = ...,
        type: global___ValueType.ValueType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_name", b"_name", "_type", b"_type", "_value", b"_value", "name", b"name", "type", b"type", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_name", b"_name", "_type", b"_type", "_value", b"_value", "id", b"id", "name", b"name", "type", b"type", "value", b"value"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_name", b"_name"]) -> typing.Literal["name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_type", b"_type"]) -> typing.Literal["type"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing.Literal["_value", b"_value"]) -> typing.Literal["value"] | None: ...

global___FooA = FooA

@typing.final
class FooB(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    ENABLED_FIELD_NUMBER: builtins.int
    id: builtins.str
    enabled: builtins.bool
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        enabled: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["enabled", b"enabled", "id", b"id"]) -> None: ...

global___FooB = FooB

@typing.final
class Config(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    FOOA_FIELD_NUMBER: builtins.int
    FOOB_FIELD_NUMBER: builtins.int
    id: builtins.str
    @property
    def fooA(self) -> global___FooA: ...
    @property
    def fooB(self) -> global___FooB: ...
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        fooA: global___FooA | None = ...,
        fooB: global___FooB | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["fooA", b"fooA", "fooB", b"fooB"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["fooA", b"fooA", "fooB", b"fooB", "id", b"id"]) -> None: ...

global___Config = Config
